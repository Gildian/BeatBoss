{"ast":null,"code":"var _jsxFileName = \"/Users/gildiangonzales/Projects/github/BeatBoss/frontend/beatboss/src/store/AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState();\n  const navigate = useNavigate();\n  const register = async (email, password, username) => {\n    if (user) {\n      console.log(\"Error: User already signed in\");\n      return;\n    }\n    try {\n      // Simulate user creation\n      const newUser = {\n        uid: \"123456789\"\n      };\n      const authUID = newUser.uid;\n      const res = await api.post(\"/user/register\", {\n        email: email,\n        username: username,\n        authUID: authUID\n      });\n      navigate(\"/\");\n    } catch (error) {\n      console.log(`Error: ${error.message}`);\n      navigate(\"/\");\n    }\n  };\n  const login = async (username, password) => {\n    if (user) return;\n    let email;\n    try {\n      // Simulate user login\n      const res = await api.post(\"/user/login\", {\n        username: username\n      });\n      if (res.data.status === 'Success') {\n        email = res.data.email;\n      } else {\n        console.log(\"Error: Invalid username\");\n        return false;\n      }\n    } catch (error) {\n      console.log(`Error: ${error.message}`);\n      return false;\n    }\n    try {\n      // Simulate successful login\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error) {\n      console.log(`Error: ${error.message}`);\n      return false;\n    }\n    setUser({\n      email\n    }); // Set the user object with the email\n  };\n  const logout = async () => {\n    try {\n      navigate(\"/\");\n      // Simulate logout\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error) {\n      console.log(`Error: ${error.message}`);\n      navigate(\"/\");\n    }\n    setUser(null); // Set the user object to null\n  };\n\n  // check after page is rendered\n  useEffect(() => {\n    // Simulate checking authentication state\n    const checkAuthState = async () => {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setLoading(false);\n    };\n    checkAuthState();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      register,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"yscyAuQKZ9XHqnSe8iaR7vXeFCQ=\", true);\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["AuthProvider","children","_s","loading","setLoading","useState","user","setUser","navigate","useNavigate","register","email","password","username","console","log","newUser","uid","authUID","res","api","post","error","message","login","data","status","Promise","resolve","setTimeout","logout","useEffect","checkAuthState","_jsxDEV","AuthContext","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gildiangonzales/Projects/github/BeatBoss/frontend/beatboss/src/store/AuthContext.jsx"],"sourcesContent":["export const AuthProvider = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState();\n  const navigate = useNavigate();\n\n  const register = async (email, password, username) => {\n    if (user) {\n      console.log(\"Error: User already signed in\");\n      return;\n    }\n    try {\n      // Simulate user creation\n      const newUser = { uid: \"123456789\" };\n      const authUID = newUser.uid;\n      const res = await api.post(\"/user/register\", {\n        email: email,\n        username: username,\n        authUID: authUID\n      });\n      navigate(\"/\");\n    } catch (error) {\n      console.log(`Error: ${error.message}`);\n      navigate(\"/\");\n    }\n  };\n\n  const login = async (username, password) => {\n    if (user) return;\n    let email;\n    try {\n      // Simulate user login\n      const res = await api.post(\"/user/login\", {\n        username: username\n      });\n      if (res.data.status === 'Success') {\n        email = res.data.email;\n      } else {\n        console.log(\"Error: Invalid username\");\n        return false;\n      }\n    } catch (error) {\n      console.log(`Error: ${error.message}`);\n      return false;\n    }\n    try {\n      // Simulate successful login\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    } catch (error) {\n      console.log(`Error: ${error.message}`);\n      return false;\n    }\n    setUser({ email }); // Set the user object with the email\n  };\n\n  const logout = async () => {\n    try {\n      navigate(\"/\");\n      // Simulate logout\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    } catch (error) {\n      console.log(`Error: ${error.message}`);\n      navigate(\"/\");\n    }\n    setUser(null); // Set the user object to null\n  };\n\n  // check after page is rendered\n  useEffect(() => {\n    // Simulate checking authentication state\n    const checkAuthState = async () => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      setLoading(false);\n    };\n    checkAuthState();\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, register, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}